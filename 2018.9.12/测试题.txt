0. 当你听到小伙伴们在谈论“映射”、“哈希”、“散列”或者“关系数组”的时候，事实上他们就是在讨论什么呢？
	字典(切记，装X的本质就是把同一个东西说成各种不同的事物~）
	
1. 尝试一下将数据（'F': 70, 'C': 67, 'h': 104, 'i': 105, 's': 115）创建为一个字典并访问键 'C' 对应的值？
test = {'F': 70, 'C': 67, 'h': 104, 'i': 105, 's': 115}
test['C']

2. 用方括号（“[]”）括起来的数据我们叫列表，那么使用大括号（“{}”）括起来的数据我们就叫字典，对吗？
不一定也可能是“集合”

3. 你如何理解有些东西字典做得到，但“万能的”列表却难以实现（臣妾做不到T_T）？
字典可以自定义索引键值


4. 下边这些代码，他们都在执行一样的操作吗？你看得出差别吗？

最终结果都是字典类型

5. 如图，你可以推测出打了马赛克部分的代码吗？
data = "1000,小甲鱼,男"
MyDict = {}
# 还记得字符串的分割方法吧，别学过就忘啦^_^
(MyDict['id'], MyDict['name'], MyDict['sex']) = data.split(',')

print("ID:   " + MyDict['id'])
print("Name: " + MyDict['name'])
print("Sex   " + MyDict['sex'])

 
0. 尝试利用字典的特性编写一个通讯录程序吧，功能如图：
import sys
def telet_index(x = 0): # 主界面
    print("|--- 欢迎使用通讯录 ---|")
    print(" |--- 1 : 查询联系人 ---|")
    print(" |--- 2 : 新建联系人 ---|")
    print(" |--- 3 : 删除联系人 ---|")
    print(" |--- 4 : 退出本程序 ---|")
    print(" |---    +++新增+++   ---|")
    print(" |--- 5 : 已有联系人 ---|")
    print(" |---      版本v2.0     ---|")
    x = str(x)
    if x == '0':
        x = input("输入指令: ")
    if x == '1':
        telet_find()
    elif x == '2':
        telet_join()
    elif x == '3':
        telet_delet()
    elif x == '4':
        print("|--- 感谢使用本程序! ---|")
        try:
            sys.exit(0)
        except:
            print("")
    elif x == '5':
        main_print()
        telet_index(1)

def telet_find(): # 查询联系人界面
    name = input("请输入查找姓名: ")
    if name in maindict:
        print('%s: %s' % (name , maindict[name]) )
        telet_index()
    else:
        print("查无此人!")
        yes_no = input("是否添加'Yes / No': ")
        if yes_no.lower() == 'yes':
            telet_join()
        else:
            telet_index()


def telet_join(): # 新建联系人界面
    each = input("姓名: ")
    if each in maindict:
        print('此联系人已经存在')
        yes_no = input("是否修改'Yes / No': ")
        if yes_no.lower() == 'yes':
            iphone = input("电话: ")
            main_join(each , iphone)
            telet_index()
        else:
            telet_index()
    else:
        iphone = input("电话: ")
        main_join(each , iphone)
        telet_index()

def telet_delet(): # 删除联系人界面
    name = input("删除无法恢复,请谨慎! \n姓名: ")
    if name in maindict:
        yes_no = input("确定删除'Yes / No': ")
        if yes_no.lower() == 'yes':
            main_delet(name)
            telet_index()
        else:
            telet_index()
    else:
        print("查无此人!")
        telet_index()

def main_join(name , iphone):
    maindict[name] = iphone
    print("%s: %s ( 成功! )" % (name , iphone))

def main_delet(name):
    maindict.pop(name)
    print("删除成功!")

def main_print():
    for i in maindict:
        print("%s: %s" % (i , maindict[i]))


if __name__ == "__main__":
    maindict = {'赵特':'123213','赵腾':'123213','赵飞':'123213'}
    telet_index()

-----------------------------分割线----------------------------------

0. Python的字典是否支持一键（Key）多值（Value）？
    不支持
1. 在字典中，如果试图为一个不存在的键（Key）赋值会怎样？
    会在字典中插件新键
2. 成员资格操作符（in和not in）可以检查一个元素是否存在序列中，当然也可以用来检查一个键（Key）是否存在字典中，那么请问哪种的检查效率更高些？为什么？
    自我感觉成员操作符在使用时更加方便，但因为调动关系符函数在系统效率上偏低，比不上使用for循环来检查键值
3. Python对键（Key）和值（Value）有没有类型限制？
    没有
4请目测下边代码执行后，字典dict1的内容是什么？
>>> dict1.fromkeys((1, 2, 3), ('one', 'two', 'three'))
>>> dict1.fromkeys((1, 3), '数字')

dict1 = {1:('one', 'two', 'three'),2:('one', 'two', 'three'),3:('one', 'two', 'three'),}
dict1 = {1:'数字',3:'数字'}

5. 如果你需要将字典dict1 = {1: 'one', 2: 'two', 3: 'three'}拷贝到dict2，你应该怎么做？
dict2 = dict1.copy()